#!/usr/bin/python3

import argparse
import os.path

parser = argparse.ArgumentParser(description='Generate new printer code.')
parser.add_argument('-c','--class-name', required=True, help='The class name in camel case.')
parser.add_argument('-t','--type', required=True,  help='The type to handle.')
args = parser.parse_args()

header = '''# ifndef {identifier}
# define {identifier}

// automatically generated by addPrinter.py

#include "PrinterRegistry.h"
// #include <xy.h> // struct xy

class {className}: public Printer {{

public:
    void print(argument_value value);

    int getStructLength(ARGUMENT_TYPE type);

    static Printer* create() {{
      return new {className}();
    }};

}};

REGISTER_PRINTER({className}, {type}, {className}::create);

#endif'''

cpp = '''#include "{filename}.h"

void {className}::print(argument_value value) {{
    // std::cout << std::endl;
    // if (value.str.empty()) {{
    //     printf ("  uninitialized struct %s\\n", ((std::string)magic_enum::enum_name(value.type)).c_str());
    //     return;
    // }}
    // struct structType *data = (struct structType*) value.str.c_str();
    // printf("  : \\n", data->);
}}

int {className}::getStructLength (ARGUMENT_TYPE type) {{
    return sizeof(struct structType);
}}
'''

path = os.path.dirname(os.path.abspath(__file__))
handlerpath = os.path.join(os.path.join(path,".."), "printers")
headerfile = os.path.join(handlerpath, "%s.h" % args.class_name)
cppfile = os.path.join(handlerpath, "%s.cpp" % args.class_name)


identifier = "MSC_%s_PRINTER_H" % args.class_name.upper()
filename = args.class_name
className = args.class_name
ptype = args.type

assert (args.class_name.endswith("Printer"))

assert (os.path.isfile(headerfile) == False and os.path.isfile(cppfile) == False)

assert (args.type.startswith("AT_")) # check if each argument begins with AT_ 

try:
    with open(headerfile,"w+") as hf:
        hf.write(header.format(identifier=identifier, type=ptype, className=className))
    with open(cppfile,"w+") as cf:
        cf.write(cpp.format(filename=className, className=className))

    print ("Success")
except:
    print("[Error] while generating files.")

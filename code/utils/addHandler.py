#!/usr/bin/python3

import argparse
import os.path

parser = argparse.ArgumentParser(description='Generate new syscall handler code.')
parser.add_argument('-c','--class-name', required=True, help='The class name.')
parser.add_argument('-s','--sys', required=True,  help='The name of the SYS_* enum value. (<sys/syscall.h>')
parser.add_argument('-a','--arguments', required=True, help='List of argument types')
args = parser.parse_args()

header = '''# ifndef {identifier}
# define {identifier}
// automatically generated by addhandler.py

#include "HandlerRegistry.h"

#define TYPE {sys}

class {className}: public Handler
{{
public:
    {className}() {{
        _type = TYPE;
    }}

    std::vector<ARGUMENT_TYPE> getArgumentTypes();
    
    static Handler* create() {{
      return new {className}();
    }};
}};

REGISTER_HANDLER({className}, (int) TYPE, {className}::create);

#endif'''

cpp = '''#include "{filename}.h"
// automatically generated by addhandler.py

std::vector<ARGUMENT_TYPE> {className}::getArgumentTypes()
{{
    return std::vector<ARGUMENT_TYPE>({{{arguments}}});
}}'''

path = os.path.dirname(os.path.abspath(__file__))
handlerpath = os.path.join(os.path.join(path,".."), "handler")
headerfile = os.path.join(handlerpath, "%s.h" % args.class_name)
cppfile = os.path.join(handlerpath, "%s.cpp" % args.class_name)


identifier = "MSC_%s_HANDLER_H" % args.class_name.upper()
filename = args.class_name
className = args.class_name
sys = args.sys
arguments = args.arguments
assert (sys.startswith("SYS_"))
assert (os.path.isfile(headerfile) == False and os.path.isfile(cppfile) == False)

assert (False not in [(x.strip().startswith("AT_")) for x in arguments.split(",")]) # check if each argument begins with AT_ 

try:
    with open(headerfile,"w+") as hf:
        hf.write(header.format(identifier=identifier, sys=sys, className=className))
    with open(cppfile,"w+") as cf:
        cf.write(cpp.format(filename=className, className=className, arguments=arguments))

    print ("Success")
except:
    print("[Error] while generating files.")
